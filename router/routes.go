package router

import (
	"mj0lk.be/netwars/attack"
	"mj0lk.be/netwars/clan"
	"mj0lk.be/netwars/event"
	"mj0lk.be/netwars/message"
	"mj0lk.be/netwars/player"
	"mj0lk.be/netwars/program"
	"mj0lk.be/netwars/utils"
	"net/http"
)

var API = map[string]Routes{
	"/players": Routes{
		Route{
			"login player , returns access token",
			[]string{"login"},
			[]string{"/login"},
			"POST",
			jsonheader,
			player.AuthenticatePlayer,
			player.Authentication{"email", "password"},
			utils.JSONResult{Result: "token"},
			false,
		},
		Route{
			"create new player, returns access token",
			[]string{"createplayer"},
			[]string{"/"},
			"POST",
			jsonheader,
			player.CreatePlayer,
			player.Creation{"blabla@mail.com", "nickname", "password"},
			utils.JSONResult{Result: "token"},
			false,
		},
		Route{
			"retrieve player status",
			[]string{"playerstatus"},
			[]string{"/status"},
			"GET",
			jsonheader,
			player.StatusPlayer,
			nil,
			utils.JSONResult{Result: player.Player{}},
			true,
		},
		Route{
			"retrieve public player",
			[]string{"publicplayer.playerid"},
			[]string{"/status/{playerid}"},
			"GET",
			jsonheader,
			player.PublicStatusPlayer,
			nil,
			utils.JSONResult{Result: player.PublicPlayer{}},
			true,
		},
		Route{
			"allocates new program to be used",
			[]string{"allocate"},
			[]string{"/allocation"},
			"POST",
			jsonheader,
			player.AllocatePrograms,
			player.Allocation{"program key", 10},
			http.StatusOK,
			true,
		},
		Route{
			"deallocate program",
			[]string{"deallocate"},
			[]string{"/deallocation"},
			"POST",
			jsonheader,
			player.DeallocatePrograms,
			player.Allocation{"program key", 10},
			http.StatusOK,
			true,
		},
		Route{
			`retrieve public player list, arguments(optional) /range/cursor 
				range= true/false -> only players in attack range; cursor -> key received in previous request to load next batch (paging)`,
			[]string{"playerlist", "playerlist.rangebool", "playerlist.rangebool.cursor", "playerlist.cursor"},
			[]string{"/targets", "/targets/{rangebool:true|false}", "/targets/{rangebool:true|false}/{cursor}", "/targets/{cursor}"},
			"GET",
			jsonheader,
			player.GetPlayerList,
			nil,
			utils.JSONResult{Result: player.PlayerList{Cursor: "send to get next page",
				Players: []player.Profile{player.Profile{}}}},
			true,
		},
		Route{
			"retrieve upload url for player avatar",
			[]string{"playeruploadurl"},
			[]string{"/avatar"},
			"GET",
			jsonheader,
			player.UploadAvatar,
			nil,
			utils.JSONResult{Result: "upload url"},
			true,
		},
		Route{
			"upload player avatar image, retrieve uploadurl first",
			[]string{"playerupload"},
			[]string{"/avatar"},
			"POST",
			jsonheader,
			player.EditAvatar,
			"file with name: avatar",
			http.StatusOK,
			true,
		},
		Route{
			"update private player profile",
			[]string{"updateprofile"},
			[]string{"/profile"},
			"POST",
			jsonheader,
			player.EditProfile,
			player.ProfileUpdate{
				Name:      "name",
				Birthday:  player.TIMELAYOUT,
				Country:   "country",
				Language:  "English",
				Address:   "address",
				Signature: "signature",
			},
			http.StatusOK,
			true,
		},
		Route{
			`retrieve player local new events/message counter, with clankey retrieves new global events/message counter
				optional argument clankey -> retrieve global tracker (clan events)`,
			[]string{"playertrackers", "playertrackers.clankey"},
			[]string{"/trackers", "/trackers/{clankey}"},
			"GET",
			jsonheader,
			player.PlayerTracker,
			nil,
			utils.JSONResult{Result: event.Tracker{0, 0}},
			true,
		},
		Route{
			"retrieve player local events; optional argument cursor -> paging",
			[]string{"localevents", "localevents.cursor"},
			[]string{"/localevents", "/localevents/{cursor}"},
			"GET",
			jsonheader,
			player.LocalEvents,
			nil,
			utils.JSONResult{Result: event.EventList{Cursor: "send to get next page",
				Events: []event.Event{event.Event{}}}},
			true,
		},
		Route{
			"retrieve player global events (clan) ; optional argument cursor -> paging",
			[]string{"globalevents", "globalevents.cursor"},
			[]string{"/globalevents", "/globalevents/{cursor}"},
			"GET",
			jsonheader,
			player.GlobalEvents,
			nil,
			utils.JSONResult{Result: event.EventList{Cursor: "send to get next page",
				Events: []event.Event{event.Event{}}}},
			true,
		},
	},
	"/clans": Routes{
		Route{
			"create new clan",
			[]string{"createclan"},
			[]string{"/"},
			"POST",
			jsonheader,
			clan.CreateClan,
			clan.Creation{"tag", "name"},
			http.StatusOK,
			true,
		},
		Route{
			"retrieve clan status (private)",
			[]string{"clanstatus"},
			[]string{"/status"},
			"GET",
			jsonheader,
			clan.ClanStatus,
			nil,
			utils.JSONResult{Result: clan.Clan{}},
			true,
		},
		Route{
			"retrieve public clan status",
			[]string{"clanstatus.clanid"},
			[]string{"/status/{clanid:[0-9]+}"},
			"GET",
			jsonheader,
			clan.PublicClanStatus,
			nil,
			utils.JSONResult{Result: clan.Clan{}},
			true,
		},
		Route{
			`retrieve public clan list, arguments(optional) /range/cursor 
				range= true/false -> only clans in attack range; cursor -> key received in previous request to load next batch (paging)`,
			[]string{"clanlist", "clanlist.rangebool", "clanlist.rangebool.cursor", "clanlist.cursor"},
			[]string{"/list", "/list/{rangebool:true|false}", "/list/{rangebool:true|false}/{cursor}", "/list/{cursor}"},
			"GET",
			jsonheader,
			player.GetPlayerList,
			nil,
			utils.JSONResult{Result: player.PlayerList{Cursor: "send to get next page",
				Players: []player.Profile{player.Profile{}}}},
			true,
		},
		Route{
			"invite player to join clan",
			[]string{"invite"},
			[]string{"/invitations"},
			"POST",
			jsonheader,
			clan.ClanInvite,
			clan.Pmanipulation{},
			http.StatusOK,
			true,
		},
		Route{
			"retrieve current active invitations",
			[]string{"invites"},
			[]string{"/invitations"},
			"GET",
			jsonheader,
			clan.Invites,
			nil,
			utils.JSONResult{Result: []clan.Invite{clan.Invite{}}},
			true,
		},
		Route{
			"join clan for invitation",
			[]string{"joinclan"},
			[]string{"/links"},
			"POST",
			jsonheader,
			clan.JoinClan,
			clan.SendKey{Key: "invite key"},
			http.StatusOK,
			true,
		},
		Route{
			"leave current clan",
			[]string{"leaveclan"},
			[]string{"/unlinks"},
			"POST",
			jsonheader,
			clan.LeaveClan,
			nil,
			http.StatusOK,
			true,
		},
		Route{
			"declare war on clan, only way to gain clan points, after 24h you can declare peace",
			[]string{"war"},
			[]string{"/connections"},
			"POST",
			jsonheader,
			clan.ClanConnect,
			clan.SendKey{Key: "clan key"},
			http.StatusOK,
			true,
		},
		Route{
			"declare peace with clan",
			[]string{"peace"},
			[]string{"/disconnections"},
			"POST",
			jsonheader,
			clan.ClanDisConnect,
			clan.SendKey{Key: "connection key"},
			http.StatusOK,
			true,
		},
		Route{
			"get upload url for clan avatar (img)",
			[]string{"clanuploadurl"},
			[]string{"/avatar"},
			"GET",
			jsonheader,
			clan.UploadAvatar,
			nil,
			utils.JSONResult{Result: "upload url"},
			true,
		},
		Route{
			"upload clan avatar (img)",
			[]string{"clanupload"},
			[]string{"/avatar"},
			"POST",
			jsonheader,
			clan.EditAvatar,
			"file with name: avatar",
			http.StatusOK,
			true,
		},
		Route{
			"update clan message",
			[]string{"clanmessage"},
			[]string{"/messages"},
			"POST",
			jsonheader,
			clan.EditMessage,
			clan.MessageUpdate{},
			http.StatusOK,
			true,
		},
		Route{
			"promote player",
			[]string{"promote"},
			[]string{"/promotions"},
			"POST",
			jsonheader,
			clan.EditLeaderShip,
			clan.Promotion{},
			http.StatusOK,
			true,
		},
		Route{
			"demote player",
			[]string{"demote"},
			[]string{"/demotions"},
			"POST",
			jsonheader,
			clan.EditLeaderShip,
			clan.Promotion{},
			http.StatusOK,
			true,
		},
		Route{
			"remove player from clan",
			[]string{"kick"},
			[]string{"/removals"},
			"POST",
			jsonheader,
			clan.KickPlayer,
			clan.Pmanipulation{},
			http.StatusOK,
			true,
		},
	},
	"/attacks": Routes{
		Route{
			"attack player",
			[]string{"attack"},
			[]string{"/"},
			"POST",
			jsonheader,
			attack.AttackPlayer,
			attack.AttackCfg{},
			utils.JSONResult{Result: attack.AttackEvent{AttackType: 0,
				Event: &event.Event{EventPrograms: []event.EventProgram{event.EventProgram{}}}}},
			true,
		},
	},
	"/messages": Routes{
		Route{
			"create new message or update owned message (admin can do everything)",
			[]string{"createorupdatemessage"},
			[]string{"/"},
			"POST",
			jsonheader,
			message.CreateOrUpdateMessage,
			message.Message{},
			http.StatusOK,
			true,
		},
		Route{
			"retrieve clan forum",
			[]string{"clanforum", "clanforum.cursor"},
			[]string{"/boards/clan", "/boards/clan/{cursor}"},
			"GET",
			jsonheader,
			message.ListClanBoards,
			nil,
			utils.JSONResult{Result: message.MessageList{Cursor: "paging",
				Messages: []message.Message{message.Message{}}, BoardKey: "board key"}},
			true,
		},
		Route{
			"retrieve public boards",
			[]string{"publicboards", "publicboards.cursor"},
			[]string{"/boards/public", "/boards/public/{cursor}"},
			"GET",
			jsonheader,
			message.ListPublicBoards,
			nil,
			utils.JSONResult{Result: message.MessageList{Cursor: "paging",
				Messages: []message.Message{message.Message{}}, BoardKey: "board key"}},
			true,
		},
		Route{
			"retrieve threads for board",
			[]string{"threads.bkey", "threads.bkey.cursor"},
			[]string{"/threads/{bkey}", "/threads/{bkey}/{cursor}"},
			"GET",
			jsonheader,
			message.ListThreads,
			nil,
			utils.JSONResult{Result: message.MessageList{Cursor: "paging",
				Messages: []message.Message{message.Message{}}, BoardKey: "board key",
				ThreadKey: "thread key"}},
			true,
		},
		Route{
			"retrieve messages for thread",
			[]string{"messages.tkey", "messages.tkey.cursor"},
			[]string{"/messages/{tkey}", "/messages/{tkey}/{cursor}"},
			"GET",
			jsonheader,
			message.ListMessages,
			nil,
			utils.JSONResult{Result: message.MessageList{Cursor: "paging",
				Messages: []message.Message{message.Message{}}, BoardKey: "board key",
				ThreadKey: "thread key"}},
			true,
		},
	},
	"/programs": Routes{
		Route{
			"retrieve all current active programs",
			[]string{"getallprograms"},
			[]string{"/"},
			"GET",
			jsonheader,
			program.GetAllPrograms,
			nil,
			utils.JSONResult{Result: map[string][]program.Program{"type": []program.Program{program.Program{}}}},
			true,
		},
		Route{
			"create or update program",
			[]string{"createorupdateprogram"},
			[]string{"/"},
			"POST",
			jsonheader,
			program.CreateOrUpdateProgram,
			utils.JSONResult{Result: program.Program{}},
			http.StatusOK,
			true,
		},
		Route{
			"get single program",
			[]string{"getprogram.key"},
			[]string{"/{key}"},
			"GET",
			jsonheader,
			program.GetProgram,
			nil,
			utils.JSONResult{Result: program.Program{}},
			true,
		},
	},
	"/load": Routes{
		Route{
			"internal loads all prgrams into datastore",
			[]string{"loadjsonprograms"},
			[]string{"/programs"},
			"GET",
			[]string{},
			program.LoadPrograms,
			nil,
			http.StatusOK,
			false,
		},
	},
}
