package router

import (
	"mj0lk.be/netwars/app"
	"mj0lk.be/netwars/attack"
	"mj0lk.be/netwars/clan"
	"mj0lk.be/netwars/event"
	"mj0lk.be/netwars/message"
	"mj0lk.be/netwars/player"
	"mj0lk.be/netwars/program"
	"net/http"
)

var API = Routes{
	Route{
		"login player , returns access token",
		[]string{"/players/login/"},
		"POST",
		player.AuthenticatePlayer,
		player.Authentication{"email", "password"},
		app.JSONResult{Result: "token"},
		false,
	},
	Route{
		"create new player, returns access token",
		[]string{"/players/"},
		"PUT",
		player.CreatePlayer,
		player.Creation{"blabla@mail.com", "nickname", "password"},
		app.JSONResult{Result: "token"},
		false,
	},
	Route{
		"retrieve player status",
		[]string{"/players/status/"},
		"GET",
		player.StatusPlayer,
		nil,
		app.JSONResult{Result: player.Player{}},
		true,
	},
	Route{
		"retrieve public player",
		[]string{"/players/profiles/:player_id/"},
		"GET",
		player.PublicStatusPlayer,
		nil,
		app.JSONResult{Result: player.PublicPlayer{}},
		true,
	},
	Route{
		"allocates new program to be used",
		[]string{"/players/allocations/"},
		"POST",
		player.AllocatePrograms,
		player.Allocation{"program key", 10},
		http.StatusOK,
		true,
	},
	Route{
		"deallocate program",
		[]string{"/players/deallocations/"},
		"POST",
		player.DeallocatePrograms,
		player.Allocation{"program key", 10},
		http.StatusOK,
		true,
	},
	Route{
		`retrieve public player list, arguments(optional) /range/cursor 
				range= true/false -> only players in attack range; cursor -> key received in previous request to load next batch (paging)`,
		[]string{"/players/lists/:range_bool/", "/players/lists/:range_bool/:cursor_key/"},
		"GET",
		player.GetPlayerList,
		nil,
		app.JSONResult{Result: player.PlayerList{Cursor: "send to get next page",
			Players: []player.Profile{player.Profile{}}}},
		true,
	},
	Route{
		"retrieve upload url for player avatar",
		[]string{"/players/avatars/"},
		"GET",
		player.UploadAvatar,
		nil,
		app.JSONResult{Result: "upload url"},
		true,
	},
	Route{
		"upload player avatar image, retrieve uploadurl first",
		[]string{"/players/avatars/"},
		"POST",
		player.EditAvatar,
		"file with name: avatar",
		http.StatusOK,
		true,
	},
	Route{
		"update private player profile",
		[]string{"/players/profiles/"},
		"POST",
		player.EditProfile,
		player.ProfileUpdate{
			Name:      "name",
			Birthday:  player.TIMELAYOUT,
			Country:   "country",
			Language:  "English",
			Address:   "address",
			Signature: "signature",
		},
		http.StatusOK,
		true,
	},
	Route{
		`retrieve player local new events/message counter, with clankey retrieves new global events/message counter
				optional argument clankey -> retrieve global tracker (clan events)`,
		[]string{"/players/trackers/", "/players/trackers/:clan_key/"},
		"GET",
		player.PlayerTracker,
		nil,
		app.JSONResult{Result: event.Tracker{0, 0}},
		true,
	},
	Route{
		"retrieve player local events; optional argument cursor -> paging",
		[]string{"/players/localevents/", "/players/localevents/:cursor_key/"},
		"GET",
		player.LocalEvents,
		nil,
		app.JSONResult{Result: event.EventList{Cursor: "send to get next page",
			Events: []event.Event{event.Event{}}}},
		true,
	},
	Route{
		"retrieve player global events (clan) ; optional argument cursor -> paging",
		[]string{"/players/globalevents/", "/players/globalevents/:cursor_key/"},
		"GET",
		player.GlobalEvents,
		nil,
		app.JSONResult{Result: event.EventList{Cursor: "send to get next page",
			Events: []event.Event{event.Event{}}}},
		true,
	},

	Route{
		"create new clan",
		[]string{"/clans/"},
		"PUT",
		clan.CreateClan,
		clan.Creation{"tag", "name"},
		http.StatusOK,
		true,
	},
	Route{
		"retrieve clan status (private)",
		[]string{"/clans/status/"},
		"GET",
		clan.ClanStatus,
		nil,
		app.JSONResult{Result: clan.Clan{}},
		true,
	},
	Route{
		"retrieve public clan status",
		[]string{"/clans/profiles/:clan_id/"},
		"GET",
		clan.PublicClanStatus,
		nil,
		app.JSONResult{Result: clan.Clan{}},
		true,
	},
	Route{
		`retrieve public clan list, arguments(optional) /range/cursor 
				range= true/false -> only clans in attack range; cursor -> key received in previous request to load next batch (paging)`,
		[]string{"/clans/lists/:range_bool/", "/list/:rangebool/:cursor_key/"},
		"GET",
		clan.GetClanList,
		nil,
		app.JSONResult{Result: clan.ClanList{Cursor: "send to get next page",
			Clans: []clan.Clan{clan.Clan{}}}},
		true,
	},
	Route{
		"invite player to join clan",
		[]string{"/clans/invitations/"},
		"PUT",
		clan.ClanInvite,
		clan.SendID{},
		http.StatusOK,
		true,
	},
	Route{
		"retrieve current active invitations",
		[]string{"/clans/invitations/"},
		"GET",
		clan.Invites,
		nil,
		app.JSONResult{Result: []clan.Invite{clan.Invite{}}},
		true,
	},
	Route{
		"join clan for invitation",
		[]string{"/clans/links/"},
		"POST",
		clan.JoinClan,
		clan.SendKey{Key: "invite key"},
		http.StatusOK,
		true,
	},
	Route{
		"leave current clan",
		[]string{"/clans/unlinks/"},
		"POST",
		clan.LeaveClan,
		nil,
		http.StatusOK,
		true,
	},
	Route{
		"declare war on clan, only way to gain clan points, after 24h you can declare peace",
		[]string{"/clans/connections/"},
		"POST",
		clan.ClanConnect,
		clan.SendID{ID: 3847},
		http.StatusOK,
		true,
	},
	Route{
		"declare peace with clan",
		[]string{"/clans/disconnections/"},
		"POST",
		clan.ClanDisConnect,
		clan.SendID{ID: 3546},
		http.StatusOK,
		true,
	},
	Route{
		"get upload url for clan avatar (img)",
		[]string{"/clans/avatars/"},
		"GET",
		clan.UploadAvatar,
		nil,
		app.JSONResult{Result: "upload url"},
		true,
	},
	Route{
		"upload clan avatar (img)",
		[]string{"/clans/avatars/"},
		"POST",
		clan.EditAvatar,
		"file with name: avatar",
		http.StatusOK,
		true,
	},
	Route{
		"update clan message",
		[]string{"/clans/messages/"},
		"POST",
		clan.EditMessage,
		clan.MessageUpdate{},
		http.StatusOK,
		true,
	},
	Route{
		"promote player",
		[]string{"/clans/promotions/"},
		"POST",
		clan.EditLeaderShip,
		clan.Promotion{},
		http.StatusOK,
		true,
	},
	Route{
		"demote player",
		[]string{"/clans/demotions/"},
		"POST",
		clan.EditLeaderShip,
		clan.Promotion{},
		http.StatusOK,
		true,
	},
	Route{
		"remove player from clan",
		[]string{"/clans/removals/"},
		"POST",
		clan.KickPlayer,
		clan.SendID{},
		http.StatusOK,
		true,
	},

	Route{
		"attack player",
		[]string{"/attacks/"},
		"POST",
		attack.AttackPlayer,
		attack.AttackCfg{},
		app.JSONResult{Result: attack.AttackEvent{AttackType: 0,
			Event: &event.Event{EventPrograms: []event.EventProgram{event.EventProgram{}}}}},
		true,
	},

	Route{
		"create new message or update owned message (admin can do everything)",
		[]string{"/messages/"},
		"POST",
		message.CreateOrUpdateMessage,
		message.Message{},
		http.StatusOK,
		true,
	},
	Route{
		"retrieve clan forum",
		[]string{"/messages/boards/clan/", "/messages/boards/clan/:cursor_key/"},
		"GET",
		message.ListClanBoards,
		nil,
		app.JSONResult{Result: message.MessageList{Cursor: "paging",
			Messages: []message.Message{message.Message{}}, BoardKey: "board key"}},
		true,
	},
	Route{
		"retrieve public boards",
		[]string{"/messages/boards/public/", "/messages/boards/public/:cursor_key/"},
		"GET",
		message.ListPublicBoards,
		nil,
		app.JSONResult{Result: message.MessageList{Cursor: "paging",
			Messages: []message.Message{message.Message{}}, BoardKey: "board key"}},
		true,
	},
	Route{
		"retrieve threads for board",
		[]string{"/messages/threads/:b_key/", "/messages/threads/:b_key/:cursor_key/"},
		"GET",
		message.ListThreads,
		nil,
		app.JSONResult{Result: message.MessageList{Cursor: "paging",
			Messages: []message.Message{message.Message{}}, BoardKey: "board key",
			ThreadKey: "thread key"}},
		true,
	},
	Route{
		"retrieve messages for thread",
		[]string{"/messages/messages/:t_key/", "/messages/messages/:t_key/:cursor_key/"},
		"GET",
		message.ListMessages,
		nil,
		app.JSONResult{Result: message.MessageList{Cursor: "paging",
			Messages: []message.Message{message.Message{}}, BoardKey: "board key",
			ThreadKey: "thread key"}},
		true,
	},
	Route{
		"retrieve all current active programs",
		[]string{"/programs/"},
		"GET",
		program.GetAllPrograms,
		nil,
		app.JSONResult{Result: map[string][]program.Program{"type": []program.Program{program.Program{}}}},
		true,
	},
	Route{
		"create or update program",
		[]string{"/programs/"},
		"POST",
		program.CreateOrUpdateProgram,
		app.JSONResult{Result: program.Program{}},
		http.StatusOK,
		true,
	},
	Route{
		"get single program",
		[]string{"/programs/:program_key/"},
		"GET",
		program.GetProgram,
		nil,
		app.JSONResult{Result: program.Program{}},
		true,
	},
	Route{
		"internal loads all prgrams into datastore",
		[]string{"/load/programs/"},
		"GET",
		program.LoadPrograms,
		nil,
		http.StatusOK,
		false,
	},
	/*Route{
		"test appengien security stuff",
		[]string{"/load/token/"},
		"GET",
		secure.GetToken,
		nil,
		http.StatusOK,
		false,
	},
	Route{
		"test appengien security stuff",
		[]string{"/load/token/:token/:keyname/"},
		"GET",
		secure.VerifySecure,
		nil,
		http.StatusOK,
		false,
	},*/
}
